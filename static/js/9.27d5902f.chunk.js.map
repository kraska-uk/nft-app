{"version":3,"sources":["pages/MintPage/index.js","pages/MintPage/MintPage.js"],"names":["hot","module","props","triedEager","useEagerConnect","context","useActiveWeb3React","library","chainId","account","active","error","useState","to","location","state","mintToAddress","tokenIds","setState","handleChange","e","name","value","disabled","setDisabled","useEffect","utils","isAddress","handleMint","a","i","split","parseInt","trim","signer","getSigner","contract","Contract","KraskaNftAddress","KraskaNftAbi","txPromise","safeMint","toast","promise","pending","success","render","data","txIsPending","href","hash","getExternalLinkProps","wait","icon","code","message","title","as","Content","Subheader","Row","Column","fluid","required","label","placeholder","onChange","color","onClick","type","info"],"mappings":"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","file":"static/js/9.27d5902f.chunk.js","sourcesContent":["export { default } from './MintPage';\n","import React, { useState, useEffect } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { Container, Header, Grid, Input, Button } from 'semantic-ui-react';\nimport Page from '../../components/Page';\n\nimport { toast } from 'react-toastify';\nimport { useEagerConnect, useActiveWeb3React } from '../../hooks/index';\n\nimport { Contract, utils } from 'ethers';\nimport { KraskaNftAddress } from '../../constants';\nimport KraskaNftAbi from '../../abis/KraskaNftAbi.json';\nimport getExternalLinkProps from '../../utils/getExternalLinkProps';\n\n\n\nfunction MintPage(props) {\n  const triedEager = useEagerConnect();\n  const context = useActiveWeb3React();\n  const { library, chainId, account, active, error } = context;\n\n\n  const [state, setState] = useState({\n    to: props.location.state?.mintToAddress, tokenIds: ''\n  });\n\n  const handleChange = (e, { name, value }) => {\n    setState({ ...state, [name]: value, });\n  }\n\n  const [disabled, setDisabled] = useState(true);\n  useEffect(() => {\n    if (\n      utils.isAddress(state.to) && state.tokenIds\n      && triedEager && active && account\n    ) {\n      setDisabled(false);\n    } else {\n      setDisabled(true);\n    }\n  }, [state, triedEager, active, account]);\n\n\n  const handleMint = async () => {\n    const tokenIds = state.tokenIds.split(',');\n    for (let i in tokenIds) {\n      tokenIds[i] = parseInt(tokenIds[i].trim());\n    }\n\n    const signer = library.getSigner();\n    const contract = new Contract(KraskaNftAddress[chainId], KraskaNftAbi, signer);\n    const txPromise = contract.safeMint(state.to, tokenIds);\n    toast.promise(\n      txPromise,\n      {\n        pending: 'Waiting for the signing',\n        success: {\n          render({ data }) {\n            const txIsPending = (<div>Transaction is pending <a href={'https://etherscan.io/tx/' + data.hash} {...getExternalLinkProps()}>{data.hash}</a></div>);\n\n            toast.promise(\n              data.wait(1),\n              {\n                pending: {\n                  render() {\n                    return (txIsPending);\n                  },\n                  icon: \"🚀\",\n                },\n                success: {\n                  render() {\n                    return <div>Transaction done 👌</div>;\n                  },\n                  icon: \"🟢\",\n                },\n                error: 'Transaction rejected 🤯'\n              });\n\n            return (<div>Transaction is signed</div>);\n          },\n          icon: \"🟢\",\n        },\n        error: {\n          render({ data }) {\n            return (<div>Signing is rejected ({data.code}, {data.message})</div>);\n          },\n          icon: \"❌\",\n        },\n      }\n    );\n  }\n\n  const handleClean = () => {\n    setState({ to: '', tokenIds: '', });\n    toast.info('Cleaned!');\n  }\n\n\n  return (\n    <Page title={'Mint NFTs'}>\n      <Container>\n        <Header as='h1'>\n          <Header.Content>\n            Mint new NFTs to Address\n            <Header.Subheader>Contract: <a\n              href={'https://etherscan.io/token/' + KraskaNftAddress[chainId]}\n              {...getExternalLinkProps()}\n            >{KraskaNftAddress[chainId]}</a>\n            </Header.Subheader>\n          </Header.Content>\n        </Header>\n\n\n        <Grid>\n          <Grid.Row>\n            <Grid.Column>\n              <Input fluid required\n                name='to' label='to:' placeholder='Ethereum Address: 0x...'\n                value={state.to}\n                error={!utils.isAddress(state.to)}\n                success={utils.isAddress(state.to)}\n                onChange={handleChange}\n              />\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column>\n              <Input fluid required\n                name='tokenIds' label='tokenIds:' placeholder='0,1,2'\n                value={state.tokenIds}\n                onChange={handleChange}\n              />\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column>\n              <Button fluid color='green' onClick={handleMint} disabled={disabled}>Mint</Button>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column>\n              <Button fluid color='red' type='submit' onClick={handleClean}>Clean</Button>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Container>\n    </Page>\n  );\n};\n\nexport default hot(module)(MintPage);\n"],"sourceRoot":""}