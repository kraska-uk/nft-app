{"version":3,"sources":["pages/NewWalletPage/index.js","pages/NewWalletPage/NewWalletPage.js"],"names":["ComponentToPrint","React","forwardRef","props","ref","address","privateKey","textAlign","as","Content","Subheader","style","color","href","getExternalLinkProps","marginLeft","marginRight","size","value","hot","module","useState","wallet","setWallet","componentRef","useRef","handlePrint","useReactToPrint","content","current","title","primary","onClick","walletRaw","Wallet","createRandom","toast","info","copy","Link","to","pathname","routerPaths","mint","state","mintToAddress"],"mappings":"iIAAA,+D,yOCkBMA,EAAmBC,IAAMC,YAAW,SAACC,EAAOC,GAChD,IAAMC,EAAUF,EAAME,QAChBC,EAAaH,EAAMG,WAGzB,OACE,sBAAKF,IAAKA,EAAV,UACE,uBACA,eAAC,IAAD,CAAWG,UAAU,SAArB,UACE,cAAC,IAAD,CAAQC,GAAG,KAAX,SACE,eAAC,IAAOC,QAAR,mCAEE,cAAC,IAAOC,UAAR,iDAIJ,cAAC,IAAD,IACA,cAAC,IAAD,CAAQF,GAAG,KAAX,SACE,eAAC,IAAOC,QAAR,WACE,4CACEE,MAAO,CAAEC,MAAO,mBAChBC,KAAM,gCAAkCR,GACpCS,eAHN,0BAIWT,MACX,cAAC,IAAOK,UAAR,oFAGHL,GAAW,qBAAKM,MAAO,CAAEI,WAAY,OAAQC,YAAa,QAA/C,SACV,cAAC,IAAD,CAAQC,KAzBG,IAyBeC,MAAO,gCAAkCb,MAGrE,cAAC,IAAD,IACA,cAAC,IAAD,CAAQG,GAAG,KAAX,SACE,eAAC,IAAOC,QAAR,2BACgBH,EACd,cAAC,IAAOI,UAAR,+EAGHJ,GAAc,qBAAKK,MAAO,CAAEI,WAAY,OAAQC,YAAa,QAA/C,SACb,cAAC,IAAD,CAAQC,KApCG,IAoCeC,MAAOZ,eAiE5Ba,kBAAIC,EAAJD,EA1Df,WAA0B,IAAD,EACKE,mBAAS,CAAEhB,QAAS,KAAMC,WAAY,OAD3C,mBAChBgB,EADgB,KACRC,EADQ,KAYjBC,EAAeC,mBACfC,EAAcC,0BAAgB,CAClCC,QAAS,kBAAMJ,EAAaK,WAgB9B,OACE,eAAC,IAAD,CAAMC,MAAO,sBAAb,UACE,eAAC,IAAD,CAAWvB,UAAU,SAArB,UACE,cAAC,IAAD,CAAQwB,SAAO,EAACC,QA9BJ,WAChB,IAAMC,EAAYC,IAAOC,eACzBZ,EAAU,CACRlB,QAAS4B,EAAU5B,QACnBC,WAAY2B,EAAU3B,aAExB8B,IAAMC,KAAK,0BAwBP,2BACA,cAAC,IAAD,CAAQzB,MAAM,MAAMoB,QAASN,EAA7B,6BACA,cAAC,IAAD,CAAQd,MAAM,QAAQoB,QAlBT,WACjBM,IAAKhB,EAAOjB,SACZ+B,IAAMC,KAAK,oBAgBP,6BACA,cAAC,IAAD,CAAQzB,MAAM,MAAMoB,QAdN,WAClBT,EAAU,CACRlB,QAAS,KACTC,WAAY,OAEd8B,IAAMC,KAAK,aASP,sBACA,cAAC,IAAD,CAAQzB,MAAM,QACZJ,GAAI+B,IACJC,GAAI,CACFC,SAAUC,IAAYC,KACtBC,MAAO,CAAEC,cAAevB,EAAOjB,UAJnC,wBAQF,cAAC,IAAD,IACA,8BACE,cAACL,EAAD,CACEI,IAAKoB,EACLnB,QAASiB,EAAOjB,QAChBC,WAAYgB,EAAOhB,eAGvB,uBAAM,+B","file":"static/js/11.dd84b0ea.chunk.js","sourcesContent":["export { default } from './NewWalletPage';\n","import React, { useRef, useState } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { Container, Divider, Header, Button } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport Page from '../../components/Page';\nimport { routerPaths } from '../../router/helper';\n\nimport { toast } from 'react-toastify';\n\nimport { Wallet } from 'ethers';\n\nimport copy from 'copy-to-clipboard';\nimport QRCode from 'qrcode.react';\nimport { useReactToPrint } from 'react-to-print';\nimport getExternalLinkProps from '../../utils/getExternalLinkProps';\n\n\n\nconst ComponentToPrint = React.forwardRef((props, ref) => {\n  const address = props.address;\n  const privateKey = props.privateKey;\n  const QRCodeSize = 400;\n\n  return (\n    <div ref={ref}>\n      <br />\n      <Container textAlign='center'>\n        <Header as='h1'>\n          <Header.Content>\n            Your Ethereum Address\n            <Header.Subheader>Text Text Text Text Text Text</Header.Subheader>\n          </Header.Content>\n        </Header>\n\n        <Divider />\n        <Header as='h3'>\n          <Header.Content>\n            <a\n              style={{ color: 'rgba(0,0,0,.87)', }}\n              href={'https://etherscan.io/address/' + address}\n              {...getExternalLinkProps()}\n            >Address: {address}</a>\n            <Header.Subheader>Use this QR code to view the address on the Ethereum blockchain.</Header.Subheader>\n          </Header.Content>\n        </Header>\n        {address && <div style={{ marginLeft: 'auto', marginRight: 'auto', }}>\n          <QRCode size={QRCodeSize} value={'https://etherscan.io/address/' + address} />\n        </div>}\n\n        <Divider />\n        <Header as='h3'>\n          <Header.Content>\n            Private key: {privateKey}\n            <Header.Subheader>Use this QR code to access this address with a private key.</Header.Subheader>\n          </Header.Content>\n        </Header>\n        {privateKey && <div style={{ marginLeft: 'auto', marginRight: 'auto', }}>\n          <QRCode size={QRCodeSize} value={privateKey} />\n        </div>}\n      </Container>\n    </div>\n  );\n});\n\nfunction NewWalletPage() {\n  const [wallet, setWallet] = useState({ address: null, privateKey: null });\n\n  const handleNew = () => {\n    const walletRaw = Wallet.createRandom();\n    setWallet({\n      address: walletRaw.address,\n      privateKey: walletRaw.privateKey,\n    });\n    toast.info('New Wallet generated!');\n  }\n\n  const componentRef = useRef();\n  const handlePrint = useReactToPrint({\n    content: () => componentRef.current,\n  });\n\n  const handleCopy = () => {\n    copy(wallet.address);\n    toast.info('Address copied!');\n  }\n\n  const handleClean = () => {\n    setWallet({\n      address: null,\n      privateKey: null,\n    });\n    toast.info('Cleaned!');\n  }\n\n  return (\n    <Page title={'New Ethereum Wallet'}>\n      <Container textAlign='center'>\n        <Button primary onClick={handleNew}>1. New Wallet</Button>\n        <Button color='red' onClick={handlePrint}>2. Print Wallet</Button>\n        <Button color='green' onClick={handleCopy}>3. Copy Address</Button>\n        <Button color='red' onClick={handleClean}>4. Clean</Button>\n        <Button color='green'\n          as={Link}\n          to={{\n            pathname: routerPaths.mint,\n            state: { mintToAddress: wallet.address }\n          }}>5. Mint</Button>\n      </Container>\n\n      <Divider />\n      <div>\n        <ComponentToPrint\n          ref={componentRef}\n          address={wallet.address}\n          privateKey={wallet.privateKey}\n        />\n      </div>\n      <br /><br />\n    </Page>\n  );\n};\n\nexport default hot(module)(NewWalletPage);\n"],"sourceRoot":""}